********************************************
    LINUX COMMANDES GENERALES UTILISATION                     
********************************************

-------------------------------------
Archiver (tar) et compresser (gzip)
-------------------------------------
archiver (regrouper les fichiers)
tar -cvf mon_archive.tar  mon_dossier/  
ou
tar -cvf archive.tar fic1 fic2 fic3

-c créer une archive tar
-v afficher le détail des opérations
-f assembler l'archive dans un fichier

tar -tf archive.tar  #afficher le contenu de l'archive sans l'extraire
tar -rvf archiv.tar  fichier_supplementaire #ajouter un fichier
tar -xvf archiv.tar  #extraire les fichiers de l'archive -x extraire

Compresser
gzip archiv.tar #compresse
gunzip archiv.tar #décompresse
gzip fic1.tuto #compresse un fichier renommé fic1.tuto.gz

Archiver et Compresser 
tar -zcvf archiv.tar.gz  mon_dossier/  #compresse
tar -zxvf archiv.tar.gz #décompresse



-------------------------------------
lister le contenu d'un répertoire
-------------------------------------
ls ~  #ls /home/user/
ls ~/toto #le /home/user/toto
ls -alt ./toto
ls -i(inode) -R(récursivement) -a(caché) -t(ordre de dernière modification) -d(détail permission)
drwxrwxrwx  2  root  sys  10650  Jan  30  16:12  execute
---d directory répertoire, - fichier, b, c fichier spécial, l lien symbolique
---3 fois rwx permission owner, group, user
---déplacement arborescence, création, visualiser un fichier
---2 le minimum de lien sur un fichier (lui-même et son père) (7 lien 5 sous répertoire+lui+père)
---root nom du propriétaire
---sys nom du groupe qu'il appartient
---10650 taille du fichier
---date
---execute nom du fichier

------------------------------------------------
listeer et la taille d' fichier ou répertoire
------------------------------------------------
***lister les disque dur
df

***savoir la taille de fichier ou répertoire
du -sh ./etc 

-------------------------------------------
Ou on est ? ou on veut aller qui je suis ?
-------------------------------------------
pwd  	#où l'on se trouve ensuite cd.(répertoire de travail) ou cd..(retour)
cd ~ 	#aller directement dans son répertoire home
whoami	#qui je suis

which   #permet de connaître le nom complet du fichier que vous voulez utiliser en cas d'homonyme.
which more  => /bin/more

whereis #permet de connaitre le (s) emplacements des exécutables des sources et de la documentation sur une commande.
whereis finger #finger:  /usr/bin/finger   /usr/share/man/man1/finger.1.gz
whereis more => more: /bin/more  /usr/share/man/ma1/more.1.gz
Cela signifie que l'exécutable est /bin/more et la documentation est dans le fichier /usr/share/man/ma1/more.1.gz


-------------------------------------------
Fichier et Répertoire
-------------------------------------------
***crée un fichier
touch nomFichier       #fichier vide
cat> MonFichier        #fichier avec Bonjour mon fichier
Bonjour mon fichier!

cat>rep1(crée le fichier rep1)>rep2(crée ou écrase le fichier)>> concaténé donnée
  (CTRL+D) quit                                                  #crée un fichier rep1 et rep2

Lisez le contenu de monFichier
car monFichier
more MonFichier
less MonFichier
head MonFichier
tail MonFichier

cat ./toto  more (entre, space) ou less (permet les commandes vi) #affiche les données
cat fic1 fic2 > fic_total
head –n nombre fichier  // affiche les n premières lignes d’un fichier
tail nombre fichier  //affiche les n dernières lignes (-5) 5 dernières ligne et (+2) affiche à partir de la ligne 2
Avec option –f permet de visualiser la fin d’un fichier tout en bénéficiant du rafraîchissement de l’affichage (pour visualiser un fichier trace ou log  la sortie de cette commande est : CTRL-C)

***Supprimer un fichier, répertoire
--------------------------------
rm -rf  #supprime les descandants (récursif), sans confirmation
rm -R
crée et supprime un répertoire
------------------------------
mkdir /home/user/monRepertoire
rmdir /home/user/oldExercice #supprime fichier vide sinon c'est -r

copie ou renommer fichier, répertoire 
-------------------------
cp -r source cible #fichier distincts et référencés par leur inode

création d'un lien symbolique vers un fichier
---------------------------------------------
ln -s nomFichierActuel  deuxièmeNomFichier #-s crée un lien symbolique

déplace un fichier
------------------
mv source cible

compare des fichiers
--------------------
dif fic1 fic2  #compare l'ASCII et ignore les lignes identiques (e affiche les lignes modifiées)
cmp [-l] [-s] file1  file2 #affiche les différences quelque soit leur type (ASCII ou Binaire)

chercher un fichier
-------------------
find ./ -name "long.txt"
find ./ -type -name "*.py"
find . -name '*.s' -print

recherche le modèle donné non seulement dans un mais plusieurs fichiers
------------------------------------------------------------------------
grep -i err /var/log/messages*
grep -i it tex_file.txt  #affiche les ligne ou il y a it



Diviser en plusieurs parties un fichier
--------------------------------------
split -ln fichier #découpe en petit fichier de n lignes chacun qui se termine par LF.

manipulation des chemins de fichiers
------------------------------------ pour les scripts
basename /home/mesFichiers/monFichier   =>monFichier
#permet de connaitre le nom du fichier sans son répertoire parent

basename /home/mesFichiers/monFichier.ps  .ps =>monFichier
#permet de se débarrasser du suffixe .ps

dirname /home/mesFichiers/monFichier  => /home/mesFichier
#connaitre le chemin d'accès du fichier

file /home/mesFichiers/monFichier  => ascii text si c'est un fichier directory
#nature du fichier stockées sous forme d'un nombre dans les 2 premiers octets du fichier.
#la correspondance entre ce nombre et un libellé en clair grâce au contenu du fichier magic.
type ls, type rm, type pwd
#pour connaitre le type et le chemin d'accès d'une commande

Permissions
-----------
propriétaire: chown -R user:group My_Rep
permission: chmod 751 My_Prog
rwx permission: u user, g group, o other , -a all (tous par défaut)
chmod +x prog #-rwxrwxrwx
chmod o-w prog #rwrrwxr-x
chmod g=0 prog #rwxr-xr-x

Les permission par défaut
-------------------------
lors de la création d'un fichier le noyau se base sur une valeur contenue dans une
variable umask (permission par défaut à la création d'un nouveau répertoire ou nouveau fichier)
Les permissions sont codées sur 12 bits, dont 9 correspondent aux droits en lecture/écriture/exécution sur le fichier.                      user, group, other
Umask est aussi codé sur 3 octets
Que fait le système face à une création de répertoire ? il donne en permissions le complément à 1 de umask
Exemple : umask   050
0 en octal pour l’utilisateur soit en binaire 000
5 en octal pour le groupe soit en binaire 101
0 en octal pour les autres soit en binaire 000
Le complément à 1 de 000  101  000 est  111   010   111 (rwx-w-rwx) ce qui traduit en octal 727 c’est la permission.
Pour une création de fichier ?  le système comme pour un répertoire 050 ce qui donne :
111  010  111 (rwx-w-rwx) mais ensuite il supprime les permissions exécution à 1 ce qui donne :
110  010  110   (rw-w-rw-) soit en octal 626

Autre exemple : umask 542 (101  100 010)
Répertoire créé avec 010  011  101 (complément à 1)  -w-wxr-x
Fichier créé avec    010  010  100 ((suppression des exécutions à 1)  -w-w-r-
Voici les exemples conformes à la réalité
umask 777 #aucune permission

------------------------------------------------------------------------------------------------------------------------


-------------------------------------------
SHELL
connaitre le shell utilisé
-------------------------------------------
sh (Bourne Shell)  csh (C Shell) tcsh (C Shell amélioré)  ksh (Korn Shell)
bash (Bourne again shell)   zsh (Z Shell)

cat /etc/shells   #les shells installés sur le système.
echo $SHELL 	#shell en cours d'utilisation
export		#afficher les variables d'environnement du terminal







































**************************************************************************************
**********************************
	vi - vim
**********************************
i : insérer du texte
echap : retour en mode interactif
k (haut) l (droite) j (bas)  h (gauche) : déplacement (flêche mode insertion)

0 et $ : déplace début et fin de ligne
w : se déplacer de mot en mot
:w  : enregistrer  :wq  enregistre et quit

opérations standards:
x : effaces des lettres
d : efface des mots, des lignes
dd : supprimer une ligne
dw : supprimer un mot
yy :  copier une ligne en mémoire
yw : copier un mot
y$ : copier du curseur jusqu'à la fin de la ligne
p  : coller
r : remplacer une lettre rs (remplace par s)
u : annule la modification
G : 7G sauter à la ligne numéro x
/recherche_le_mot : 
:r autrefichier : fusion d'un fichier
:sp  : découpe l'affichage si on veut permet de voir 2 endroits différents
:vsp : couper en horizontale



**********************************
	Système de fichier Unix
**********************************
nfs  network file system
jfs  journalized file system
hfs+ système de fichier Mac OS X
ext2 système de fichier de linux
ext3 amélioration du format ext2
vfat système de fichier FAT 32
proc visualisation et manipulation des processus
fd   descripteurs de fichier (/dev/fd)

La liste des sytèmes de fichiers supportés par l'os:
/proc/filesystems et la commande fsck permet de vérifier et de réparer les système
de fichiers endommagés (cohérence entre fichiers présents et tables des inodes références vers les blocs de données...)
 
Sous UNIX tout est fichier: certains sont virtuels et ne correspondent à aucune partition.
ils servent de réprésentation logique à un aspect donné du système.
ils n'occupent aucune place sur le disque, et sont émulés dynamiquement à chaque accès par le noyau du système d'exploitation.

- proc processus actifs et leurs propriétés (arguments, répertoire de travail...) sous formes de fichiers.
- fd permet d'accéder aux descripteurs de fichiers pour simplifier la programmation car à l'intérieur des programmes ces descripteurs sont vus comme des fichiers.

Les inodes
-----------
	Tout fichier est avant tout stocké sous la forme d'un noeud d'index, ou inode, contenant l'ensemble des métainformations associées aux fichiers.
Ce noeud d'index comprend plusieurs pointeurs vers les zones du disque dur contenant le contenu du fichier sous forme de séquences de secteur linéaires: Si ces zones ne sont pas contigües, on parlera de fragmentation.
	Le noeud d'index ne contient pas le nom du fichier, mais un entier permettant de l'identifier de manière unique: plusieurs noms peuvent représenter des liens vers un même fichier comme les liens symboliques.

Les fichiers liens
------------------
il est possible d’avoir plusieurs noms dans différents répertoires pour un même fichier : 
Ces noms sont des identificateurs du fichier et ont le même numéro d’inode. 
Cette relation entre un numéro d’inode et un identificateur s’appelle un lien.
Tout fichier possède au minimum un lien. 
Lorsque le lien est établi dans le même système de fichiers le lien est dit simple 
(les droits sont les mêmes, fichiers et lien car c’est le même objet). 
Par contre un lien symbolique peut être mis dans un autre système de fichiers que le fichier d’origine : c’est un pointeur vers l’autre fichier, ses permissions seront indépendantes du fichier source.

Les fichiers spéciaux
---------------------
(b,c) associe un nom de fichier à un périphérique ou une communication clavier écran imprimante et sont stocké dans le répertoire /dev possèdent un inode mais pas de bloc de données et sont gérés par des interfaces d’accès à la ressource physique différents selon leur type.
ls -l /dev   #liste 2 imprimantes /major(driver)/mineur(imprimante)
crw--w---- 1 root lp1  6,1  .....
crw--w---- 1 root lp1  6,2  .....





